#!/usr/bin/env python3
import curses, random, subprocess, argparse, re, json
from michimusemodels import *

class NoahCurses(object):
  titlebar = "noahcurses"
  playa = None
  def __init__(self, args):
    self.artistregex = re.compile(args.artist)
    self.albumregex = re.compile(args.album)
    self.titleregex = re.compile(args.title)
    self.pathregex = re.compile(args.path)
  def draw(self):
    self.dims = self.screen.getmaxyx()
    self.screen.clear()
    self.screen.addstr(2, 2, "Now playing", curses.color_pair(2))
    self.screen.addstr(3, 4, self.current.get_title(), curses.color_pair(1))
    self.screen.addstr(4, 2, "by", curses.color_pair(3))
    self.screen.addstr(5, 4, self.current.get_artist(), curses.color_pair(1))
    self.screen.addstr(6, 2, "from", curses.color_pair(4))
    self.screen.addstr(7, 4, self.current.get_album(), curses.color_pair(1))
    self.screen.border()
    self.screen.addstr(0, round(self.dims[1]/2-len(self.titlebar)/2), self.titlebar, curses.color_pair(5))
    self.screen.refresh()
  def reloadtracks(self):
    self.tracks = []
    for track in Track.select():
      if self.artistregex.search(track.get_artist()) and self.albumregex.search(track.get_album()) and self.titleregex.search(track.get_title()) and self.pathregex.search(track.path):
        self.tracks.append(track)
    random.shuffle(self.tracks)
  def newtrack(self):
    if len(self.tracks) < 1:
      self.reloadtracks()
    if self.playa:
      while self.playa.poll() is None:
        self.playa.kill()
    self.current = self.tracks.pop()
    self.playa = subprocess.Popen(['ffplay', '-nodisp', '-loglevel', 'quiet', '-autoexit', self.current.path])
    self.draw()
  def main(self, screen):
    self.screen = screen
    curses.curs_set(0)
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)
    curses.init_pair(3, curses.COLOR_GREEN, curses.COLOR_BLACK)
    curses.init_pair(4, curses.COLOR_BLUE, curses.COLOR_BLACK)
    curses.init_pair(5, curses.COLOR_BLACK, curses.COLOR_WHITE)
    self.screen.nodelay(1)
    self.reloadtracks()
    self.newtrack()
    while True:
      if self.playa.poll() is not None:
        self.newtrack()
      event = self.screen.getch()
      if event == ord("q"):
        self.playa.kill()
        break
      if event == ord("n") or event == curses.KEY_RIGHT:
        self.playa.kill()
        self.newtrack()
      if event == ord("s"):
        self.reloadtracks()
        self.newtrack()
      if event == ord("r") or self.screen.getmaxyx() != self.dims:
        self.draw()

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  if not os.path.exists(os.path.expanduser('~/.config/michimuseconf.json')):
    with open(os.path.expanduser('~/.config/michimuseconf.json'),'w') as confile:
      confile.write(json.dumps({'regex':{'artist':'.+','album':'.+','title':'.+','path':'.+'}}, indent=4))
  with open(os.path.expanduser('~/.config/michimuseconf.json')) as confile:
    defreg = json.loads(confile.read())
  parser.add_argument('-ar', '--artist', type=str, help='artist regex to match', default=defreg['regex']['artist'])
  parser.add_argument('-al', '--album', type=str, help='album regex to match', default=defreg['regex']['album'])
  parser.add_argument('-t', '--title', type=str, help='title regex to match', default=defreg['regex']['title'])
  parser.add_argument('-p', '--path', type=str, help='path regex to match', default=defreg['regex']['path'])
  args = parser.parse_args()
  curses.wrapper(NoahCurses(args).main)
